/* automatically generated by rust-bindgen */

#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]

pub const PCAP_VERSION_MAJOR: u32 = 2;
pub const PCAP_VERSION_MINOR: u32 = 4;
pub const PCAP_ERRBUF_SIZE: u32 = 256;
pub const PCAP_IF_LOOPBACK: u32 = 1;
pub const PCAP_IF_UP: u32 = 2;
pub const PCAP_IF_RUNNING: u32 = 4;
pub const PCAP_IF_WIRELESS: u32 = 8;
pub const PCAP_IF_CONNECTION_STATUS: u32 = 48;
pub const PCAP_IF_CONNECTION_STATUS_UNKNOWN: u32 = 0;
pub const PCAP_IF_CONNECTION_STATUS_CONNECTED: u32 = 16;
pub const PCAP_IF_CONNECTION_STATUS_DISCONNECTED: u32 = 32;
pub const PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE: u32 = 48;
pub const PCAP_ERROR: i32 = -1;
pub const PCAP_ERROR_BREAK: i32 = -2;
pub const PCAP_ERROR_NOT_ACTIVATED: i32 = -3;
pub const PCAP_ERROR_ACTIVATED: i32 = -4;
pub const PCAP_ERROR_NO_SUCH_DEVICE: i32 = -5;
pub const PCAP_ERROR_RFMON_NOTSUP: i32 = -6;
pub const PCAP_ERROR_NOT_RFMON: i32 = -7;
pub const PCAP_ERROR_PERM_DENIED: i32 = -8;
pub const PCAP_ERROR_IFACE_NOT_UP: i32 = -9;
pub const PCAP_ERROR_CANTSET_TSTAMP_TYPE: i32 = -10;
pub const PCAP_ERROR_PROMISC_PERM_DENIED: i32 = -11;
pub const PCAP_ERROR_TSTAMP_PRECISION_NOTSUP: i32 = -12;
pub const PCAP_WARNING: u32 = 1;
pub const PCAP_WARNING_PROMISC_NOTSUP: u32 = 2;
pub const PCAP_WARNING_TSTAMP_TYPE_NOTSUP: u32 = 3;
pub const PCAP_NETMASK_UNKNOWN: u32 = 4294967295;
pub const PCAP_TSTAMP_HOST: u32 = 0;
pub const PCAP_TSTAMP_HOST_LOWPREC: u32 = 1;
pub const PCAP_TSTAMP_HOST_HIPREC: u32 = 2;
pub const PCAP_TSTAMP_ADAPTER: u32 = 3;
pub const PCAP_TSTAMP_ADAPTER_UNSYNCED: u32 = 4;
pub const PCAP_TSTAMP_PRECISION_MICRO: u32 = 0;
pub const PCAP_TSTAMP_PRECISION_NANO: u32 = 1;
pub const PCAP_BUF_SIZE: u32 = 1024;
pub const PCAP_SRC_FILE: u32 = 2;
pub const PCAP_SRC_IFLOCAL: u32 = 3;
pub const PCAP_SRC_IFREMOTE: u32 = 4;
pub const PCAP_SRC_FILE_STRING: &'static [u8; 8usize] = b"file://\0";
pub const PCAP_SRC_IF_STRING: &'static [u8; 9usize] = b"rpcap://\0";
pub const PCAP_OPENFLAG_PROMISCUOUS: u32 = 1;
pub const PCAP_OPENFLAG_DATATX_UDP: u32 = 2;
pub const PCAP_OPENFLAG_NOCAPTURE_RPCAP: u32 = 4;
pub const PCAP_OPENFLAG_NOCAPTURE_LOCAL: u32 = 8;
pub const PCAP_OPENFLAG_MAX_RESPONSIVENESS: u32 = 16;
pub const PCAP_SAMP_NOSAMP: u32 = 0;
pub const PCAP_SAMP_1_EVERY_N: u32 = 1;
pub const PCAP_SAMP_FIRST_AFTER_N_MS: u32 = 2;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __time_t = ::std::os::raw::c_long;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
  pub tv_sec: __time_t,
  pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
  assert_eq!(
    ::std::mem::size_of::<timeval>(),
    16usize,
    concat!("Size of: ", stringify!(timeval))
  );
  assert_eq!(
    ::std::mem::align_of::<timeval>(),
    8usize,
    concat!("Alignment of ", stringify!(timeval))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(timeval),
      "::",
      stringify!(tv_sec)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(timeval),
      "::",
      stringify!(tv_usec)
    )
  );
}
pub type bpf_int32 = ::std::os::raw::c_int;
pub type bpf_u_int32 = u_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_program {
  pub bf_len: u_int,
  pub bf_insns: *mut bpf_insn,
}
#[test]
fn bindgen_test_layout_bpf_program() {
  assert_eq!(
    ::std::mem::size_of::<bpf_program>(),
    16usize,
    concat!("Size of: ", stringify!(bpf_program))
  );
  assert_eq!(
    ::std::mem::align_of::<bpf_program>(),
    8usize,
    concat!("Alignment of ", stringify!(bpf_program))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<bpf_program>())).bf_len as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(bpf_program),
      "::",
      stringify!(bf_len)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<bpf_program>())).bf_insns as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(bpf_program),
      "::",
      stringify!(bf_insns)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_insn {
  pub code: u_short,
  pub jt: u_char,
  pub jf: u_char,
  pub k: bpf_u_int32,
}
#[test]
fn bindgen_test_layout_bpf_insn() {
  assert_eq!(
    ::std::mem::size_of::<bpf_insn>(),
    8usize,
    concat!("Size of: ", stringify!(bpf_insn))
  );
  assert_eq!(
    ::std::mem::align_of::<bpf_insn>(),
    4usize,
    concat!("Alignment of ", stringify!(bpf_insn))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<bpf_insn>())).code as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(bpf_insn),
      "::",
      stringify!(code)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<bpf_insn>())).jt as *const _ as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(bpf_insn),
      "::",
      stringify!(jt)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<bpf_insn>())).jf as *const _ as usize },
    3usize,
    concat!(
      "Offset of field: ",
      stringify!(bpf_insn),
      "::",
      stringify!(jf)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<bpf_insn>())).k as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(bpf_insn),
      "::",
      stringify!(k)
    )
  );
}
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
  _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
  pub _flags: ::std::os::raw::c_int,
  pub _IO_read_ptr: *mut ::std::os::raw::c_char,
  pub _IO_read_end: *mut ::std::os::raw::c_char,
  pub _IO_read_base: *mut ::std::os::raw::c_char,
  pub _IO_write_base: *mut ::std::os::raw::c_char,
  pub _IO_write_ptr: *mut ::std::os::raw::c_char,
  pub _IO_write_end: *mut ::std::os::raw::c_char,
  pub _IO_buf_base: *mut ::std::os::raw::c_char,
  pub _IO_buf_end: *mut ::std::os::raw::c_char,
  pub _IO_save_base: *mut ::std::os::raw::c_char,
  pub _IO_backup_base: *mut ::std::os::raw::c_char,
  pub _IO_save_end: *mut ::std::os::raw::c_char,
  pub _markers: *mut _IO_marker,
  pub _chain: *mut _IO_FILE,
  pub _fileno: ::std::os::raw::c_int,
  pub _flags2: ::std::os::raw::c_int,
  pub _old_offset: __off_t,
  pub _cur_column: ::std::os::raw::c_ushort,
  pub _vtable_offset: ::std::os::raw::c_schar,
  pub _shortbuf: [::std::os::raw::c_char; 1usize],
  pub _lock: *mut _IO_lock_t,
  pub _offset: __off64_t,
  pub _codecvt: *mut _IO_codecvt,
  pub _wide_data: *mut _IO_wide_data,
  pub _freeres_list: *mut _IO_FILE,
  pub _freeres_buf: *mut ::std::os::raw::c_void,
  pub __pad5: usize,
  pub _mode: ::std::os::raw::c_int,
  pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
  assert_eq!(
    ::std::mem::size_of::<_IO_FILE>(),
    216usize,
    concat!("Size of: ", stringify!(_IO_FILE))
  );
  assert_eq!(
    ::std::mem::align_of::<_IO_FILE>(),
    8usize,
    concat!("Alignment of ", stringify!(_IO_FILE))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_flags)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_read_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_read_end)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_read_base)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_write_base)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_write_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_write_end)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_buf_base)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_buf_end)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_save_base)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_backup_base)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_save_end)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_markers)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_chain)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_fileno)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
    116usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_flags2)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_old_offset)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_cur_column)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
    130usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_vtable_offset)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
    131usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_shortbuf)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
    136usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_lock)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
    144usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_offset)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
    152usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_codecvt)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_wide_data)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
    168usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_freeres_list)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
    176usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_freeres_buf)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
    184usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(__pad5)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
    192usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_mode)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
    196usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_unused2)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap {
  _unused: [u8; 0],
}
pub type pcap_t = pcap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap_dumper {
  _unused: [u8; 0],
}
pub type pcap_dumper_t = pcap_dumper;
pub type pcap_if_t = pcap_if;
pub type pcap_addr_t = pcap_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap_file_header {
  pub magic: bpf_u_int32,
  pub version_major: u_short,
  pub version_minor: u_short,
  pub thiszone: bpf_int32,
  pub sigfigs: bpf_u_int32,
  pub snaplen: bpf_u_int32,
  pub linktype: bpf_u_int32,
}
#[test]
fn bindgen_test_layout_pcap_file_header() {
  assert_eq!(
    ::std::mem::size_of::<pcap_file_header>(),
    24usize,
    concat!("Size of: ", stringify!(pcap_file_header))
  );
  assert_eq!(
    ::std::mem::align_of::<pcap_file_header>(),
    4usize,
    concat!("Alignment of ", stringify!(pcap_file_header))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_file_header>())).magic as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_file_header),
      "::",
      stringify!(magic)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_file_header>())).version_major as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_file_header),
      "::",
      stringify!(version_major)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_file_header>())).version_minor as *const _ as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_file_header),
      "::",
      stringify!(version_minor)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_file_header>())).thiszone as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_file_header),
      "::",
      stringify!(thiszone)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_file_header>())).sigfigs as *const _ as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_file_header),
      "::",
      stringify!(sigfigs)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_file_header>())).snaplen as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_file_header),
      "::",
      stringify!(snaplen)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_file_header>())).linktype as *const _ as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_file_header),
      "::",
      stringify!(linktype)
    )
  );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum pcap_direction_t {
  PCAP_D_INOUT = 0,
  PCAP_D_IN = 1,
  PCAP_D_OUT = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap_pkthdr {
  pub ts: timeval,
  pub caplen: bpf_u_int32,
  pub len: bpf_u_int32,
}
#[test]
fn bindgen_test_layout_pcap_pkthdr() {
  assert_eq!(
    ::std::mem::size_of::<pcap_pkthdr>(),
    24usize,
    concat!("Size of: ", stringify!(pcap_pkthdr))
  );
  assert_eq!(
    ::std::mem::align_of::<pcap_pkthdr>(),
    8usize,
    concat!("Alignment of ", stringify!(pcap_pkthdr))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_pkthdr>())).ts as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_pkthdr),
      "::",
      stringify!(ts)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_pkthdr>())).caplen as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_pkthdr),
      "::",
      stringify!(caplen)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_pkthdr>())).len as *const _ as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_pkthdr),
      "::",
      stringify!(len)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap_stat {
  pub ps_recv: u_int,
  pub ps_drop: u_int,
  pub ps_ifdrop: u_int,
}
#[test]
fn bindgen_test_layout_pcap_stat() {
  assert_eq!(
    ::std::mem::size_of::<pcap_stat>(),
    12usize,
    concat!("Size of: ", stringify!(pcap_stat))
  );
  assert_eq!(
    ::std::mem::align_of::<pcap_stat>(),
    4usize,
    concat!("Alignment of ", stringify!(pcap_stat))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_stat>())).ps_recv as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_stat),
      "::",
      stringify!(ps_recv)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_stat>())).ps_drop as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_stat),
      "::",
      stringify!(ps_drop)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_stat>())).ps_ifdrop as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_stat),
      "::",
      stringify!(ps_ifdrop)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap_if {
  pub next: *mut pcap_if,
  pub name: *mut ::std::os::raw::c_char,
  pub description: *mut ::std::os::raw::c_char,
  pub addresses: *mut pcap_addr,
  pub flags: bpf_u_int32,
}
#[test]
fn bindgen_test_layout_pcap_if() {
  assert_eq!(
    ::std::mem::size_of::<pcap_if>(),
    40usize,
    concat!("Size of: ", stringify!(pcap_if))
  );
  assert_eq!(
    ::std::mem::align_of::<pcap_if>(),
    8usize,
    concat!("Alignment of ", stringify!(pcap_if))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_if>())).next as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_if),
      "::",
      stringify!(next)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_if>())).name as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_if),
      "::",
      stringify!(name)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_if>())).description as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_if),
      "::",
      stringify!(description)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_if>())).addresses as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_if),
      "::",
      stringify!(addresses)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_if>())).flags as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_if),
      "::",
      stringify!(flags)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap_addr {
  pub next: *mut pcap_addr,
  pub addr: *mut sockaddr,
  pub netmask: *mut sockaddr,
  pub broadaddr: *mut sockaddr,
  pub dstaddr: *mut sockaddr,
}
#[test]
fn bindgen_test_layout_pcap_addr() {
  assert_eq!(
    ::std::mem::size_of::<pcap_addr>(),
    40usize,
    concat!("Size of: ", stringify!(pcap_addr))
  );
  assert_eq!(
    ::std::mem::align_of::<pcap_addr>(),
    8usize,
    concat!("Alignment of ", stringify!(pcap_addr))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_addr>())).next as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_addr),
      "::",
      stringify!(next)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_addr>())).addr as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_addr),
      "::",
      stringify!(addr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_addr>())).netmask as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_addr),
      "::",
      stringify!(netmask)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_addr>())).broadaddr as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_addr),
      "::",
      stringify!(broadaddr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_addr>())).dstaddr as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_addr),
      "::",
      stringify!(dstaddr)
    )
  );
}
pub type pcap_handler = ::std::option::Option<
  unsafe extern "C" fn(arg1: *mut u_char, arg2: *const pcap_pkthdr, arg3: *const u_char),
>;
extern "C" {
  pub fn pcap_lookupdev(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn pcap_lookupnet(
    arg1: *const ::std::os::raw::c_char,
    arg2: *mut bpf_u_int32,
    arg3: *mut bpf_u_int32,
    arg4: *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_create(
    arg1: *const ::std::os::raw::c_char,
    arg2: *mut ::std::os::raw::c_char,
  ) -> *mut pcap_t;
}
extern "C" {
  pub fn pcap_set_snaplen(arg1: *mut pcap_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_set_promisc(arg1: *mut pcap_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_can_set_rfmon(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_set_rfmon(arg1: *mut pcap_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_set_timeout(arg1: *mut pcap_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_set_tstamp_type(
    arg1: *mut pcap_t,
    arg2: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_set_immediate_mode(
    arg1: *mut pcap_t,
    arg2: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_set_buffer_size(
    arg1: *mut pcap_t,
    arg2: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_set_tstamp_precision(
    arg1: *mut pcap_t,
    arg2: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_get_tstamp_precision(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_activate(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_list_tstamp_types(
    arg1: *mut pcap_t,
    arg2: *mut *mut ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_free_tstamp_types(arg1: *mut ::std::os::raw::c_int);
}
extern "C" {
  pub fn pcap_tstamp_type_name_to_val(arg1: *const ::std::os::raw::c_char)
    -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_tstamp_type_val_to_name(arg1: ::std::os::raw::c_int)
    -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn pcap_tstamp_type_val_to_description(
    arg1: ::std::os::raw::c_int,
  ) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn pcap_set_protocol_linux(
    arg1: *mut pcap_t,
    arg2: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_open_live(
    arg1: *const ::std::os::raw::c_char,
    arg2: ::std::os::raw::c_int,
    arg3: ::std::os::raw::c_int,
    arg4: ::std::os::raw::c_int,
    arg5: *mut ::std::os::raw::c_char,
  ) -> *mut pcap_t;
}
extern "C" {
  pub fn pcap_open_dead(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> *mut pcap_t;
}
extern "C" {
  pub fn pcap_open_dead_with_tstamp_precision(
    arg1: ::std::os::raw::c_int,
    arg2: ::std::os::raw::c_int,
    arg3: u_int,
  ) -> *mut pcap_t;
}
extern "C" {
  pub fn pcap_open_offline_with_tstamp_precision(
    arg1: *const ::std::os::raw::c_char,
    arg2: u_int,
    arg3: *mut ::std::os::raw::c_char,
  ) -> *mut pcap_t;
}
extern "C" {
  pub fn pcap_open_offline(
    arg1: *const ::std::os::raw::c_char,
    arg2: *mut ::std::os::raw::c_char,
  ) -> *mut pcap_t;
}
extern "C" {
  pub fn pcap_fopen_offline_with_tstamp_precision(
    arg1: *mut FILE,
    arg2: u_int,
    arg3: *mut ::std::os::raw::c_char,
  ) -> *mut pcap_t;
}
extern "C" {
  pub fn pcap_fopen_offline(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char) -> *mut pcap_t;
}
extern "C" {
  pub fn pcap_close(arg1: *mut pcap_t);
}
extern "C" {
  pub fn pcap_loop(
    arg1: *mut pcap_t,
    arg2: ::std::os::raw::c_int,
    arg3: pcap_handler,
    arg4: *mut u_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_dispatch(
    arg1: *mut pcap_t,
    arg2: ::std::os::raw::c_int,
    arg3: pcap_handler,
    arg4: *mut u_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_next(arg1: *mut pcap_t, arg2: *mut pcap_pkthdr) -> *const u_char;
}
extern "C" {
  pub fn pcap_next_ex(
    arg1: *mut pcap_t,
    arg2: *mut *mut pcap_pkthdr,
    arg3: *mut *const u_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_breakloop(arg1: *mut pcap_t);
}
extern "C" {
  pub fn pcap_stats(arg1: *mut pcap_t, arg2: *mut pcap_stat) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_setfilter(arg1: *mut pcap_t, arg2: *mut bpf_program) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_setdirection(arg1: *mut pcap_t, arg2: pcap_direction_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_getnonblock(
    arg1: *mut pcap_t,
    arg2: *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_setnonblock(
    arg1: *mut pcap_t,
    arg2: ::std::os::raw::c_int,
    arg3: *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_inject(
    arg1: *mut pcap_t,
    arg2: *const ::std::os::raw::c_void,
    arg3: usize,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_sendpacket(
    arg1: *mut pcap_t,
    arg2: *const u_char,
    arg3: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_statustostr(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn pcap_strerror(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn pcap_geterr(arg1: *mut pcap_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn pcap_perror(arg1: *mut pcap_t, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
  pub fn pcap_compile(
    arg1: *mut pcap_t,
    arg2: *mut bpf_program,
    arg3: *const ::std::os::raw::c_char,
    arg4: ::std::os::raw::c_int,
    arg5: bpf_u_int32,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_compile_nopcap(
    arg1: ::std::os::raw::c_int,
    arg2: ::std::os::raw::c_int,
    arg3: *mut bpf_program,
    arg4: *const ::std::os::raw::c_char,
    arg5: ::std::os::raw::c_int,
    arg6: bpf_u_int32,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_freecode(arg1: *mut bpf_program);
}
extern "C" {
  pub fn pcap_offline_filter(
    arg1: *const bpf_program,
    arg2: *const pcap_pkthdr,
    arg3: *const u_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_datalink(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_datalink_ext(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_list_datalinks(
    arg1: *mut pcap_t,
    arg2: *mut *mut ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_set_datalink(arg1: *mut pcap_t, arg2: ::std::os::raw::c_int)
    -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_free_datalinks(arg1: *mut ::std::os::raw::c_int);
}
extern "C" {
  pub fn pcap_datalink_name_to_val(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_datalink_val_to_name(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn pcap_datalink_val_to_description(
    arg1: ::std::os::raw::c_int,
  ) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn pcap_snapshot(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_is_swapped(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_major_version(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_minor_version(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_bufsize(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_file(arg1: *mut pcap_t) -> *mut FILE;
}
extern "C" {
  pub fn pcap_fileno(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_dump_open(
    arg1: *mut pcap_t,
    arg2: *const ::std::os::raw::c_char,
  ) -> *mut pcap_dumper_t;
}
extern "C" {
  pub fn pcap_dump_fopen(arg1: *mut pcap_t, fp: *mut FILE) -> *mut pcap_dumper_t;
}
extern "C" {
  pub fn pcap_dump_open_append(
    arg1: *mut pcap_t,
    arg2: *const ::std::os::raw::c_char,
  ) -> *mut pcap_dumper_t;
}
extern "C" {
  pub fn pcap_dump_file(arg1: *mut pcap_dumper_t) -> *mut FILE;
}
extern "C" {
  pub fn pcap_dump_ftell(arg1: *mut pcap_dumper_t) -> ::std::os::raw::c_long;
}
extern "C" {
  pub fn pcap_dump_ftell64(arg1: *mut pcap_dumper_t) -> i64;
}
extern "C" {
  pub fn pcap_dump_flush(arg1: *mut pcap_dumper_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_dump_close(arg1: *mut pcap_dumper_t);
}
extern "C" {
  pub fn pcap_dump(arg1: *mut u_char, arg2: *const pcap_pkthdr, arg3: *const u_char);
}
extern "C" {
  pub fn pcap_findalldevs(
    arg1: *mut *mut pcap_if_t,
    arg2: *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_freealldevs(arg1: *mut pcap_if_t);
}
extern "C" {
  pub fn pcap_lib_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn pcap_get_selectable_fd(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_get_required_select_timeout(arg1: *mut pcap_t) -> *mut timeval;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap_rmtauth {
  pub type_: ::std::os::raw::c_int,
  pub username: *mut ::std::os::raw::c_char,
  pub password: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_pcap_rmtauth() {
  assert_eq!(
    ::std::mem::size_of::<pcap_rmtauth>(),
    24usize,
    concat!("Size of: ", stringify!(pcap_rmtauth))
  );
  assert_eq!(
    ::std::mem::align_of::<pcap_rmtauth>(),
    8usize,
    concat!("Alignment of ", stringify!(pcap_rmtauth))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_rmtauth>())).type_ as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_rmtauth),
      "::",
      stringify!(type_)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_rmtauth>())).username as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_rmtauth),
      "::",
      stringify!(username)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_rmtauth>())).password as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_rmtauth),
      "::",
      stringify!(password)
    )
  );
}
extern "C" {
  pub fn pcap_open(
    source: *const ::std::os::raw::c_char,
    snaplen: ::std::os::raw::c_int,
    flags: ::std::os::raw::c_int,
    read_timeout: ::std::os::raw::c_int,
    auth: *mut pcap_rmtauth,
    errbuf: *mut ::std::os::raw::c_char,
  ) -> *mut pcap_t;
}
extern "C" {
  pub fn pcap_createsrcstr(
    source: *mut ::std::os::raw::c_char,
    type_: ::std::os::raw::c_int,
    host: *const ::std::os::raw::c_char,
    port: *const ::std::os::raw::c_char,
    name: *const ::std::os::raw::c_char,
    errbuf: *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_parsesrcstr(
    source: *const ::std::os::raw::c_char,
    type_: *mut ::std::os::raw::c_int,
    host: *mut ::std::os::raw::c_char,
    port: *mut ::std::os::raw::c_char,
    name: *mut ::std::os::raw::c_char,
    errbuf: *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_findalldevs_ex(
    source: *mut ::std::os::raw::c_char,
    auth: *mut pcap_rmtauth,
    alldevs: *mut *mut pcap_if_t,
    errbuf: *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap_samp {
  pub method: ::std::os::raw::c_int,
  pub value: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pcap_samp() {
  assert_eq!(
    ::std::mem::size_of::<pcap_samp>(),
    8usize,
    concat!("Size of: ", stringify!(pcap_samp))
  );
  assert_eq!(
    ::std::mem::align_of::<pcap_samp>(),
    4usize,
    concat!("Alignment of ", stringify!(pcap_samp))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_samp>())).method as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_samp),
      "::",
      stringify!(method)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pcap_samp>())).value as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(pcap_samp),
      "::",
      stringify!(value)
    )
  );
}
extern "C" {
  pub fn pcap_setsampling(p: *mut pcap_t) -> *mut pcap_samp;
}
extern "C" {
  pub fn pcap_remoteact_accept(
    address: *const ::std::os::raw::c_char,
    port: *const ::std::os::raw::c_char,
    hostlist: *const ::std::os::raw::c_char,
    connectinghost: *mut ::std::os::raw::c_char,
    auth: *mut pcap_rmtauth,
    errbuf: *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_remoteact_list(
    hostlist: *mut ::std::os::raw::c_char,
    sep: ::std::os::raw::c_char,
    size: ::std::os::raw::c_int,
    errbuf: *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_remoteact_close(
    host: *const ::std::os::raw::c_char,
    errbuf: *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pcap_remoteact_cleanup();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
  pub _address: u8,
}
